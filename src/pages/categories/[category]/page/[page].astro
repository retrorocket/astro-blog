---
import config from "@config/config.json";
import Base from "@layouts/Base.astro";
import Pagination from "@layouts/components/Pagination.astro";
import Post from "@layouts/partials/Post.astro";
import PostList from "@layouts/PostList.astro";
import taxonomyFilter from "@lib/utils/taxonomyFilter";
import { humanize } from "@lib/utils/textConverter";
import { getCollection } from "astro:content";
import { sortByDate } from "@lib/utils/sortFunctions";
import { getTaxonomy } from "@lib/taxonomyParser.astro";
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";

export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
  const { pagination } = config.settings;
  const sortByDatePosts = sortByDate(await getCollection("posts"));

  const categories = await getTaxonomy("categories");
  return categories.flatMap((category) => {
    const filterByTags: CollectionEntry<"posts">[] = taxonomyFilter(
      sortByDatePosts,
      "categories",
      category
    );
    return paginate(filterByTags, {
      params: { category: category || "" },
      pageSize: pagination,
    });
  });
};

interface PostPage extends Page {
  data: CollectionEntry<"posts">[];
}
type Props = { page: PostPage };
const { page } = Astro.props;
const { category } = Astro.params;
const humanizedCategory = humanize(category || "");
---

<Base
  title={`${humanizedCategory} の記事一覧 | Page ${page.currentPage} of ${page.lastPage}`}
>
  <PostList>
    <h1 class="h2 pb-10">
      Posts related to <span class="text-primary">{humanizedCategory}</span> category
    </h1>
    {page.data.map((post) => <Post post={post} />)}
    <Pagination
      section={`categories/${category}`}
      currentPage={page.currentPage}
      totalPages={page.lastPage}
    />
  </PostList>
</Base>
