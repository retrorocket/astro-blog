---
const { section, currentPage, totalPages } = Astro.props;

const indexPageLink = currentPage === 2;
const hasPrevPage = currentPage > 1;
const hasNextPage = totalPages > currentPage;
const ellipsis = "…";

// https://gist.github.com/kottenator/9d936eb3e4e3c3e02598
const pagination = (_current: number, last: number) => {
  let current = _current;
  if (_current < 3) current = 3;
  if (_current > totalPages - 2) current = totalPages - 2;
  const delta = 2;
  const left = current - delta;
  const right = current + delta + 1;
  const rangeWithDots: (string | number)[] = [];
  let prev = 0;

  Array.from({ length: last }, (_, i) => i + 1)
    .filter(
      (pageNum) =>
        pageNum === 1 ||
        pageNum === last ||
        (pageNum >= left && pageNum < right),
    )
    .forEach((pageNum) => {
      if (prev !== 0) {
        if (pageNum - prev === 2) {
          rangeWithDots.push(prev + 1);
        } else if (pageNum - prev !== 1) {
          rangeWithDots.push(ellipsis);
        }
      }
      rangeWithDots.push(pageNum);
      prev = pageNum;
    });

  return rangeWithDots;
};

const pageNumbers = pagination(currentPage, totalPages);

/**
 * sm の場合表示する要素数を5つにする
 */
const smDisplayPage = () => {
  const displayPages = pageNumbers.concat();
  if (pageNumbers[1] === ellipsis) {
    displayPages.splice(0, 2);
  }
  if (pageNumbers[pageNumbers.length - 2] === ellipsis) {
    displayPages.splice(displayPages.length - 2, 2);
  }
  if (displayPages.length > 5) {
    if (displayPages.indexOf(currentPage) < 3) {
      displayPages.splice(5, displayPages.length - 5);
    } else {
      displayPages.splice(0, displayPages.length - 5);
    }
  }
  return displayPages;
};

const displayPages = smDisplayPage();
---

{
  totalPages > 1 && (
    <nav
      class="mb-4 flex flex-wrap justify-center space-x-2"
      aria-label="Pagination"
    >
      {/* previous */}
      {hasPrevPage && (
        <a
          href={
            indexPageLink
              ? `${section ? "/" + section : "/"}`
              : `${section ? "/" + section : ""}/page/${currentPage - 1}`
          }
          class="rounded px-2 py-1 text-text transition-all duration-200 hover:bg-primary hover:bg-opacity-90 hover:text-body sm:py-2"
        >
          <span class="sr-only">Previous</span>
          <svg
            class="mt-1 h-5 w-5"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}

      {/* page index */}
      {pageNumbers.map((v) => {
        const hidden = displayPages.includes(v) ? "" : "hidden";
        if (v === currentPage) {
          return (
            <span
              aria-current="page"
              class={`rounded bg-primary bg-opacity-90 px-3 py-1 text-white sm:px-4 sm:py-2`}
            >
              {v}
            </span>
          );
        }
        if (v === ellipsis) {
          return (
            <span
              class={`hidden rounded text-text transition-all sm:inline-block sm:py-2`}
            >
              {ellipsis}
            </span>
          );
        }
        return (
          <a
            href={
              v === 1
                ? `${section ? "/" + section : "/"}`
                : `${section ? "/" + section : ""}/page/${v}`
            }
            class={`${hidden} rounded px-3 py-1 text-text transition-all duration-200 hover:bg-primary hover:bg-opacity-90 hover:text-body sm:inline-block sm:px-4 sm:py-2`}
          >
            {v}
          </a>
        );
      })}

      {/* next page */}
      {hasNextPage && (
        <a
          href={`${section ? "/" + section : ""}/page/${currentPage + 1}`}
          class="rounded px-2 py-1 text-text transition-all duration-200 hover:bg-primary hover:bg-opacity-90 hover:text-body sm:py-2"
        >
          <span class="sr-only">Next</span>
          <svg
            class="mt-1 h-5 w-5"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
              clip-rule="evenodd"
            />
          </svg>
        </a>
      )}
    </nav>
  )
}
